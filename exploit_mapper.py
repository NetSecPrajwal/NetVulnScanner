import subprocess
import json
import re
from cve_lookup import get_cve_info

# Hardcoded CVE mappings for known tools and labs
HARDCODED_CVES = {
    "vsftpd 2.3.4": "CVE-2011-2523",
    "rpcbind - callit procedure udp crash": "CVE-2011-1921",
    "rpcbind / libtirpc - denial of service": "CVE-2017-8779",
    "unrealircd 3.2.8.1 - backdoor": "CVE-2010-2075",
    "telnetd bravestrarr": "CVE-2020-10188",
    "apache httpd 2.2.8": "CVE-2009-3555",
    "bind 9.4.2": "CVE-2009-4022",
    "proftpd 1.3.1": "CVE-2009-3639",
    "mysql 5.0.51a": "CVE-2008-2079",
    "postgresql 8.3.0": "CVE-2008-2143",
    "apache tomcat 1.1": "CVE-2009-0033",
    "nfs kernel < 2.6.31": "CVE-2009-3726"
}

def extract_cve(title):
    # Try to extract CVE from title with regex
    match = re.search(r'CVE-\d{4}-\d{4,7}', title, re.IGNORECASE)
    if match:
        return match.group(0)

    # Try hardcoded mappings
    title_lower = title.lower()
    for key, cve in HARDCODED_CVES.items():
        if key in title_lower:
            return cve

    return "Unknown"

def search_exploits(service, version):
    keyword = f"{service} {version}"
    command = f"searchsploit -j -w \"{keyword}\""

    try:
        raw_json = subprocess.getoutput(command)
        data = json.loads(raw_json)
    except Exception as e:
        print(f"[!] Failed to parse searchsploit output for {keyword}: {e}")
        return []

    vulnerabilities = []

    for item in data.get("RESULTS_EXPLOIT", []):
        title = item.get("Title", "Unknown").strip()
        edb_id = item.get("EDB-ID", "Unknown")
        link = item.get("URL", "Unknown")
        cve = item.get("CVE", "Unknown")

        # Try better CVE extraction
        if not cve or cve == "Unknown":
            cve = extract_cve(title)

        # Fetch info from CIRCL
        if cve != "Unknown":
            cve_info = get_cve_info(cve)
            if cve_info:
                severity = cve_info.get("severity", "Unknown") or "Unknown"
                score = cve_info.get("cvss_score", "Unknown") or "Unknown"
                description = cve_info.get("description", "No description available.") or "No description available."
                print(f"[+] CVE: {cve} | Severity: {severity} | CVSS: {score}")
            else:
                severity = "Unknown"
                score = "Unknown"
                description = "No description available."
        else:
            severity = "Unknown"
            score = "Unknown"
            description = "No CVE available."

        vulnerabilities.append({
            "title": title,
            "cve": cve,
            "exploitdb_id": edb_id,
            "exploitdb_link": link,
            "msf_module": f"exploit/{service.lower()}/{edb_id if edb_id else 'Unknown'}",
            "msf_rank": "Unknown",
            "disclosure_date": "Unknown",
            "check_supported": False,
            "severity": severity,
            "cvss_score": score,
            "description": description,
            "recommendation": f"Update {service} to the latest secure version."
        })

    return vulnerabilities
